/**
 * The Least Weasel Organisation
 * Copyright (C) 2004-2009 by Andrew Gillies
 */
package org.leastweasel.predict.domain;

import java.io.Serializable;
import java.util.Set;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinTable;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.hibernate.validator.constraints.NotBlank;

/**
 * A team competing in a {@link Competition}. Teams play {@link Fixture}s against each other.
 */
@Entity
public class Team implements Serializable, Comparable<Team> {

	private static final long serialVersionUID = 1L;

	private Long id;

    private String name;

    /**
     * The categories to which the team belongs. Only leaf categories should be assigned.
     */
    private Set<TeamCategory> categories;

    /**
     * Get the team's unique id (generated by its data source). Will be null if not persistent.
     */
    @Id
    @GeneratedValue
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Get the team's name.
     *
     * @return the team's name
     */
    @NotBlank
    public String getName() {
        return name;
    }

    /**
     * Set the team's name.
     *
     * @param name the team's name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Get the categories to which this team belongs.
     *
     * @return the team's categories
     */
    @ManyToMany
    @JoinTable(name = "assigned_team_category", joinColumns = { @JoinColumn(name = "team_id") },
               inverseJoinColumns = { @JoinColumn(name = "category_id") })
    public Set<TeamCategory> getCategories() {
        return categories;
    }

    /**
     * Set the categories to which this team belongs.
     *
     * @param categories the team's categories
     */
    public void setCategories(Set<TeamCategory> categories) {
        this.categories = categories;
    }

    /**
     * Equality operator. Note that the categories are not included in the comparison. This is to
     * avoid loading the entire category tree just to compare two teams.
     *
     * @param other the object we're comparing against
     * @return true if the objects are equal
     */
    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }

        if (other == null) {
            return false;
        }

        if (!this.getClass().equals(other.getClass())) {
            return false;
        }

        final Team team = (Team) other;

        return new EqualsBuilder().append(name, team.name).isEquals();
    }

    /**
     * Generate a hash code for this object. To be consistent with the <code>equals</code> method,
     * the categories are not included in the calculation.
     *
     * @return a hash code
     */
    @Override
    public int hashCode() {
        return new HashCodeBuilder().append(name).toHashCode();
    }

    /**
     * Compare this object with another. This determines the order in which teams are sorted, which
     * is simply by ascending name.
     *
     * @param team the team to compare
     * @return -1 if this object is less than the supplied one, 1 if it's greater, 0 if the same
     */
    public int compareTo(Team team) {
        return new CompareToBuilder().append(name, team.name).toComparison();
    }

    /**
     * Format the object as a String.
     *
     * @return the object as a String
     */
    @Override
    public String toString() {
        StringBuilder buff = new StringBuilder();

        buff.append("Team ID = ");
        buff.append(id);
        buff.append(", Name = '");
        buff.append(name);
        buff.append("'");

        return buff.toString();
    }
}
