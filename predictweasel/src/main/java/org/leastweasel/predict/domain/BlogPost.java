/**
 * The Least Weasel Organisation
 * Copyright (C) 2004-2014 by Andrew Gillies
 */
package org.leastweasel.predict.domain;

import java.io.Serializable;

import javax.persistence.Convert;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.validation.constraints.NotNull;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.joda.time.DateTime;

/**
 * A post in a league's blog. This originated as the message of the day in
 * earlier versions of PredictWeasel.
 */

@Entity
public class BlogPost implements Serializable {

	private static final long serialVersionUID = 1L;

	private Long id;

	private League league;
	
	private DateTime postTime;

	private String title;
	
	private String leadText;
	
	private String draftText;
	
	private String postedText;
	
    /**
     * Get the competition's unique id (generated by its data source). Will be null if not persistent.
     */
    @Id
    @GeneratedValue
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Get the league to which this blog belongs.
     * 
     * @return the blog's league
     */
    @ManyToOne
    @JoinColumn(name="league_id")
    public League getLeague() {
		return league;
	}

	public void setLeague(League league) {
		this.league = league;
	}

	/**
     * Get the date and time at which the post was made.
     * 
     * @return the time the post was made
     */
    @Convert(converter = DateTimeToDateConverter.class)
    public DateTime getPostTime() {
		return postTime;
	}

    public void setPostTime(DateTime postTime) {
        this.postTime = postTime;
    }

    /**
     * Get the title.
     * 
     * @return the title
     */
    @NotNull
    public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * Get the lead text. This is optional.
	 * 
	 * @return the lead text
	 */
	public String getLeadText() {
		return leadText;
	}

	public void setLeadText(String leadText) {
		this.leadText = leadText;
	}

	/**
	 * This is where the post text is saved while the user is editing it. It's only
	 * copied into the posted text field when it is posted by the user.
	 * 
	 * @return the draft text
	 */
	public String getDraftText() {
		return draftText;
	}

	public void setDraftText(String draftText) {
		this.draftText = draftText;
	}

	/**
	 * Get the text that was posted on to the site.
	 * 
	 * @return the posted text
	 */
	public String getPostedText() {
		return postedText;
	}

	public void setPostedText(String postedText) {
		this.postedText = postedText;
	}

	/**
     * Equality operator. Only the unique ID is used in the comparison.
     *
     * @param other the object we're comparing against
     * @return true if the objects are equal
     */
    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }

        if (other == null) {
            return false;
        }

        if (!(other instanceof BlogPost)) {
            return false;
        }

        final BlogPost blogPost = (BlogPost) other;

        return new EqualsBuilder().append(id, blogPost.id)
                                  .isEquals();
    }

    /**
     * Generate a hash code for this object. To be consistent with the <code>equals</code> method,
     * only the ID is included in the calculation.
     *
     * @return a hash code
     */
    @Override
    public int hashCode() {
        return new HashCodeBuilder().append(id)
                                    .toHashCode();
    }
}
