/**
 * The Least Weasel Organisation
 * Copyright (C) 2004-2014 by Andrew Gillies
 */
package org.leastweasel.predict.domain;

import java.io.Serializable;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.ManyToOne;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * A {@link League} that a {@link User} has subscribed to.
 */
@Entity
public class UserSubscription implements Serializable {

	private static final long serialVersionUID = 1L;

	private Long id;
	
    private League league;

    private User user;

    /**
     * Get the subscription's unique id (generated by its data source). Will be null if not persistent.
     */
    @Id
    @GeneratedValue
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Get the league to which the user has subscribed.
     * 
     * @return the subscribed to league
     */
    @ManyToOne
    public League getLeague() {
        return league;
    }

    public void setLeague(League league) {
		this.league = league;
	}

	/**
     * Get the user this subscription is for.
     */
    @ManyToOne
    public User getUser() {
        return user;
    }

	public void setUser(User user) {
		this.user = user;
	}

    /**
     * Comparison operator. Two subscriptions are equal only if their respective leagues are equal.
     * 
     * @param o the object being compared
     * @return true if the objects are the same
     */
    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }

        if (other == null) {
            return false;
        }

        if (!(other instanceof UserSubscription)) {
            return false;
        }

        final UserSubscription subscription = (UserSubscription) other;

        return new EqualsBuilder().append(league, subscription.league)
                                  .isEquals();
    }

    /**
     * Generate a hash code for this object. To be consistent with the <code>equals</code> method,
     * only the league is included in the calculation.
     *
     * @return a hash code
     */
    @Override
    public int hashCode() {
        return new HashCodeBuilder().append(league)
                                    .toHashCode();
    }

}
