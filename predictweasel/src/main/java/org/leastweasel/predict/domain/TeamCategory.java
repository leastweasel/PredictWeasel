/**
 * The Least Weasel Organisation
 * Copyright (C) 2004-2009 by Andrew Gillies
 */
package org.leastweasel.predict.domain;

import java.io.Serializable;
import java.util.Set;

import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Transient;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.hibernate.validator.constraints.NotBlank;

/**
 * A category of {@link Team}. Only teams belonging to the same category will compete against
 * each other in a {@link Competition}. For example, the FIFA World Cup is only open to 
 * national sides. But a team won't always play in competitions for the same category.
 * For example, as well as playing in their own league, a team in the Football League
 * Championship can also play in the FA Cup, open to many clubs outside the Football League.
 * <p>
 * Categories are also hierarchical. The English Football League is a parent of the English Premier
 * League. Any teams eligible to play in a competition for the child category will automatically be
 * eligible for any competitions aimed at the parent category.
 */
@Entity
public class TeamCategory implements Serializable {

	private static final long serialVersionUID = 1L;

	private Long id;

    private String name;

    /**
     * The parent category. Top-level categories will have a <code>null</code> parent.
     */
    private TeamCategory parent;

    /**
     * The children of this category.
     */
    private Set<TeamCategory> children;

    /**
     * Get the category's unique id (generated by its data source). Will be null if not persistent.
     */
    @Id
    @GeneratedValue
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Get the category's name.
     *
     * @return the category's name
     */
    @NotBlank
    public String getName() {
        return name;
    }

    /**
     * Set the category's name.
     *
     * @param name the category's name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Get the parent category.
     *
     * @return the parent category
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "parent_category_id")
    public TeamCategory getParent() {
        return parent;
    }

    /**
     * Set the parent category.
     *
     * @param parent the parent category
     */
    public void setParent(TeamCategory parent) {
        this.parent = parent;
    }

    /**
     * Get the category's child categories.
     *
     * @return the category's children
     */
    @OneToMany(mappedBy = "parent")
    public Set<TeamCategory> getChildren() {
        return children;
    }

    /**
     * Set the category's child categories.
     *
     * @param children the category's children
     */
    public void setChildren(Set<TeamCategory> children) {
        this.children = children;
    }

    /**
     * Is this a leaf node. Yes if it has no children.
     * 
     * @return true if there are no children
     */
    @Transient
    public boolean isLeaf() {
        return children == null || children.size() == 0;
    }

    /**
     * Is this a root node. Yes if it has no parent.
     * 
     * @return true if there are no children
     */
    @Transient
    public boolean isRoot() {
        return parent == null;
    }

    /**
     * Equality operator. Note that the child categories are not included in the comparison. This is
     * to avoid loading the entire category tree just to compare two nodes.
     * 
     * @param other the object we're comparing against
     * @return true if the objects are equal
     */
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }

        if (other == null) {
            return false;
        }

        if (!this.getClass().equals(other.getClass())) {
            return false;
        }

        final TeamCategory category = (TeamCategory) other;

        return new EqualsBuilder().append(name, category.name)
                                  .isEquals();
    }

    /**
     * Generate a hash code for this object. To be consistent with the <code>equals</code> method,
     * the child categories are not included in the calculation.
     * 
     * @return a hash code
     */
    public int hashCode() {
        return new HashCodeBuilder().append(name)
                                    .toHashCode();
    }

    /**
     * Format the object as a String.
     * 
     * @return the object as a String
     */
    public String toString() {
        StringBuffer buff = new StringBuffer();

        buff.append("TeamCategory ID =  ");
        buff.append(id);
        buff.append(", Name =  '");
        buff.append(name);
        buff.append("'");

        return buff.toString();
    }
}
