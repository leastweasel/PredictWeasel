/**
 * The Least Weasel Organisation
 * Copyright (C) 2004-2014 by Andrew Gillies
 */
package org.leastweasel.predict.domain;

import java.io.Serializable;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.hibernate.validator.constraints.NotBlank;

/**
 * A potentially multi-stage competition where teams play fixtures among themselves. Models the
 * real-world competition, as opposed to the purely on-line
 * {@link org.leastweasel.predict.domain.League}.
 */
@Entity
public class Competition implements Serializable {

	private static final long serialVersionUID = 1L;

	private Long id;

    private String name;

    private boolean active = true;
    
    /**
     * The list of stages comprising the competition. These are sorted by increasing 'order' value.
     */
    // private List<CompetitionStage> stages;

    /**
     * Default constructor.
     */
    public Competition() {
    }

    /**
     * Constructor with competition name.
     *
     * @param name the name of the competition
     */
    public Competition(String name) {
        this.name = name;
    }

    /**
     * Get the competition's unique id (generated by its data source). Will be null if not persistent.
     */
    @Id
    @GeneratedValue
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Get the competition's name.
     *
     * @return the competition's name
     */
    @NotBlank
    public String getName() {
        return name;
    }

    /**
     * Set the competition's name.
     *
     * @param name the competition's name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Is the competition active, and so can be seen by users of the site.
     * 
     * @return true if the competition is active
     */
    public boolean isActive() {
        return active;
    }

    /**
     * Set whether the competition is active.
     * 
     * @param active whether the competition is active
     */
    public void setActive(boolean active) {
        this.active = active;
    }

    /**
     * Get the competition's stages.
     *
     * @return the competition's stages
    @OneToMany(mappedBy = "competition")
    @OrderBy("order")
    public List<CompetitionStage> getStages() {
        return stages;
    }
     */

    /**
     * Set the stages comprising this competition.
     *
     * @param stages the competition's stages
    public void setStages(List<CompetitionStage> stages) {
        this.stages = stages;
    }
     */

    /**
     * Get the first stage.
     *
     * @return the first stage in the list, or null if the list is empty
    @Transient
    public CompetitionStage getFirstStage() {
        if (!CollectionUtils.isEmpty(stages)) {
            return stages.get(0);
        }

        return null;
    }
     */

    /**
     * Equality operator. Note that the stages are not included in the comparison. Also, whether a
     * competition is active is irrelevant as far as equality goes.
     *
     * @param other the object we're comparing against
     * @return true if the objects are equal
     */
    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }

        if (other == null) {
            return false;
        }

        if (!(other instanceof Competition)) {
            return false;
        }

        final Competition competition = (Competition) other;

        return new EqualsBuilder().append(getName(), competition.getName())
                                  .isEquals();
    }

    /**
     * Generate a hash code for this object. To be consistent with the <code>equals</code> method,
     * the stages are not included in the calculation.
     *
     * @return a hash code
     */
    @Override
    public int hashCode() {
        return new HashCodeBuilder().append(getName())
                                    .toHashCode();
    }

    /**
     * Format the object as a String.
     *
     * @return the object as a String
     */
    @Override
    public String toString() {
        StringBuilder buff = new StringBuilder();

        buff.append("Competition ID =  ");
        buff.append(id);
        buff.append(", Name =  '");
        buff.append(name);
        buff.append("', Active = ");
        buff.append(active);

        return buff.toString();
    }
}
