/**
 * The Least Weasel Organisation
 * Copyright (C) 2004-2014 by Andrew Gillies
 */
package org.leastweasel.predict.domain;

import java.io.Serializable;

import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;

/**
 * Records the number of points scored, for each prize, by a single
 * {@link Prediction} in a specific {@link League}. As each user
 * will make a single prediction for a {@link Fixture}, no matter
 * how many leagues they're playing in, we can't store the points
 * scored against the prediction; it has to be the {@link UserSubscription}.
 */
@Entity
public class PrizePoints implements Serializable {

	private static final long serialVersionUID = 1L;

	private Long id;

	private UserSubscription subscription;
	
	private Fixture fixture;

	private String prizeCode;
	
	private int pointsScored;
	
    /**
     * Get the entity's unique id (generated by its data source). Will be null if not persistent.
     */
    @Id
    @GeneratedValue
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Get the user who made the prediction and the league its score
     * will contribute to.
     * 
     * @return the user subscription
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name="subscription_id")
	public UserSubscription getSubscription() {
		return subscription;
	}

	public void setSubscription(UserSubscription subscription) {
		this.subscription = subscription;
	}

	/**
	 * Get the fixture that provoked the prediction.
	 * 
	 * @return the fixture
	 */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name="fixture_id")
	public Fixture getFixture() {
		return fixture;
	}

	public void setFixture(Fixture fixture) {
		this.fixture = fixture;
	}

	/**
	 * Get the code of the prize that these points will contribute. Each
	 * prediction may score a different number of points for each of the
	 * prizes that a league offers.
	 * 
	 * @return the prize code
	 */
	public String getPrizeCode() {
		return prizeCode;
	}

	public void setPrizeCode(String prizeCode) {
		this.prizeCode = prizeCode;
	}

	/**
	 * Get the number of points scored by the prediction in this prize.
	 * 
	 * @return the number of points scored
	 */
	public int getPointsScored() {
		return pointsScored;
	}

	public void setPointsScored(int pointsScored) {
		this.pointsScored = pointsScored;
	}
}
